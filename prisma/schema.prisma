// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  shipper
  driver
  admin
}

enum LoadStatus {
  draft
  open
  assigned
  in_transit
  delivered
  canceled
}

enum BidStatus {
  pending
  accepted
  rejected
}

enum ContractStatus {
  draft
  pending
  signed
  completed
}

enum DocumentType {
  rate_confirm
  bol
  invoice
  contract
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  name          String
  phone         String?
  companyName   String?  @map("company_name")
  emailVerified Boolean  @default(false) @map("email_verified")
  status        String   @default("active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  profile       UserProfile?
  loadsAsShipper Load[]     @relation("ShipperLoads")
  bidsAsDriver  Bid[]       @relation("DriverBids")
  contractsAsShipper Contract[] @relation("ShipperContracts")
  contractsAsDriver Contract[] @relation("DriverContracts")
  documents     Document[]
  auditLogs     AuditLog[]

  @@map("users")
}

model UserProfile {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  avatarUrl         String?  @map("avatar_url")
  bio               String?
  rating            Decimal  @default(0) @db.Decimal(3, 2)
  totalLoads        Int      @default(0) @map("total_loads")
  totalRevenue      Decimal  @default(0) @db.Decimal(10, 2) @map("total_revenue")
  verificationStatus String  @default("pending") @map("verification_status")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Location {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  zipCode   String   @map("zip_code")
  country   String   @default("USA")
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  loadsAsOrigin      Load[] @relation("OriginLoads")
  loadsAsDestination Load[] @relation("DestinationLoads")

  @@map("locations")
}

model Load {
  id                    String     @id @default(uuid())
  shipperId             String     @map("shipper_id")
  originLocationId      String?    @map("origin_location_id")
  destinationLocationId String?    @map("destination_location_id")
  title                 String
  description           String?
  palletCount           Int        @map("pallet_count")
  weightLbs             Decimal    @map("weight_lbs") @db.Decimal(10, 2)
  dimensions            String?
  loadType              String?    @map("load_type")
  rateCents             Int        @map("rate_cents")
  status                LoadStatus @default(draft)
  pickupDate            DateTime?  @map("pickup_date")
  deliveryDate          DateTime?  @map("delivery_date")
  isUrgent              Boolean    @default(false) @map("is_urgent")
  paymentTerms          String?    @map("payment_terms")
  specialRequirements   String?    @map("special_requirements")
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")

  // Relations
  shipper               User       @relation("ShipperLoads", fields: [shipperId], references: [id], onDelete: Cascade)
  originLocation        Location?  @relation("OriginLoads", fields: [originLocationId], references: [id])
  destinationLocation   Location?  @relation("DestinationLoads", fields: [destinationLocationId], references: [id])
  bids                  Bid[]
  contracts             Contract[]
  documents             Document[]

  @@map("loads")
}

model Bid {
  id                    String    @id @default(uuid())
  loadId                String    @map("load_id")
  driverId              String    @map("driver_id")
  bidAmountCents        Int       @map("bid_amount_cents")
  message               String?
  status                BidStatus @default(pending)
  estimatedPickupTime   DateTime? @map("estimated_pickup_time")
  estimatedDeliveryTime DateTime? @map("estimated_delivery_time")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  load                  Load      @relation(fields: [loadId], references: [id], onDelete: Cascade)
  driver                User      @relation("DriverBids", fields: [driverId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model Contract {
  id                String          @id @default(uuid())
  loadId            String          @map("load_id")
  shipperId         String          @map("shipper_id")
  driverId          String          @map("driver_id")
  contractNumber    String          @unique @map("contract_number")
  terms             String
  rateCents         Int             @map("rate_cents")
  status            ContractStatus  @default(draft)
  shipperSignedAt   DateTime?       @map("shipper_signed_at")
  driverSignedAt    DateTime?       @map("driver_signed_at")
  shipperSignature  String?         @map("shipper_signature")
  driverSignature   String?         @map("driver_signature")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  // Relations
  load               Load            @relation(fields: [loadId], references: [id], onDelete: Cascade)
  shipper            User            @relation("ShipperContracts", fields: [shipperId], references: [id], onDelete: Cascade)
  driver             User            @relation("DriverContracts", fields: [driverId], references: [id], onDelete: Cascade)
  documents          Document[]

  @@map("contracts")
}

model Document {
  id         String       @id @default(uuid())
  loadId     String       @map("load_id")
  contractId String?      @map("contract_id")
  type       DocumentType
  fileName   String       @map("file_name")
  fileUrl    String       @map("file_url")
  fileSize   Int?         @map("file_size")
  uploadedBy String?      @map("uploaded_by")
  createdAt  DateTime     @default(now()) @map("created_at")

  // Relations
  load       Load         @relation(fields: [loadId], references: [id], onDelete: Cascade)
  contract   Contract?    @relation(fields: [contractId], references: [id], onDelete: SetNull)
  user       User?        @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("documents")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  action    String
  tableName String?  @map("table_name")
  recordId  String?  @map("record_id")
  oldValues Json?    @map("old_values")
  newValues Json?    @map("new_values")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
