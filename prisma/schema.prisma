// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  shipper
  driver
  admin
  warehouse
}

enum LoadStatus {
  draft
  open
  assigned
  in_transit
  delivered
  canceled
}

enum BidStatus {
  pending
  accepted
  rejected
}

enum ContractStatus {
  draft
  pending
  signed
  completed
}

enum DocumentType {
  rate_confirm
  bol
  invoice
  contract
}

enum UserStatus {
  pending
  active
  suspended
  rejected
}

enum VerificationStatus {
  pending
  verified
  rejected
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  passwordHash          String
  name                  String
  role                  UserRole
  status               UserStatus @default(pending)
  phone                String?
  companyName          String?
  emailVerified        Boolean   @default(false)
  approvedAt           DateTime?
  approvedBy           String?
  rejectedAt           DateTime?
  rejectedBy           String?
  rejectionReason      String?
  passwordResetToken   String?
  passwordResetExpiresAt DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  profile              UserProfile?
  loads                Load[]      @relation("ShipperLoads")
  driverLoads          Load[]      @relation("DriverLoads")
  bids                 Bid[]
  contracts            Contract[]  @relation("ShipperContracts")
  driverContracts      Contract[]  @relation("DriverContracts")
  documents            Document[]
  auditLogs            AuditLog[]

  @@map("users")
}

model UserProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  verificationStatus   VerificationStatus @default(pending)
  rating               Float     @default(0)
  totalLoads           Int       @default(0)
  totalRevenue         Float     @default(0)
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  mfaCode              String?
  mfaCodeExpiresAt     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Location {
  id                   String    @id @default(cuid())
  name                 String
  address              String
  city                 String
  state                String
  zipCode              String
  latitude             Float?
  longitude            Float?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  originLoads          Load[]    @relation("OriginLocation")
  destinationLoads     Load[]    @relation("DestinationLocation")

  @@map("locations")
}

model Load {
  id                   String      @id @default(cuid())
  shipperId            String
  driverId             String?
  originLocationId     String
  destinationLocationId String
  title                String
  description          String?
  palletCount          Int
  weightLbs            Int
  dimensions           String?
  loadType             String?
  rateCents            Int
  status               LoadStatus  @default(draft)
  pickupDate           DateTime?
  deliveryDate         DateTime?
  isUrgent             Boolean     @default(false)
  paymentTerms         String?
  specialRequirements  String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relations
  shipper              User        @relation("ShipperLoads", fields: [shipperId], references: [id])
  driver               User?       @relation("DriverLoads", fields: [driverId], references: [id])
  originLocation       Location    @relation("OriginLocation", fields: [originLocationId], references: [id])
  destinationLocation  Location    @relation("DestinationLocation", fields: [destinationLocationId], references: [id])
  bids                 Bid[]
  contracts            Contract[]
  documents            Document[]

  @@map("loads")
}

model Bid {
  id                   String      @id @default(cuid())
  loadId               String
  driverId             String
  bidAmountCents       Int
  message              String?
  estimatedPickupTime  DateTime?
  estimatedDeliveryTime DateTime?
  status               BidStatus   @default(pending)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relations
  load                 Load        @relation(fields: [loadId], references: [id], onDelete: Cascade)
  driver               User        @relation(fields: [driverId], references: [id])

  @@map("bids")
}

model Contract {
  id                   String          @id @default(cuid())
  loadId               String
  shipperId            String
  driverId             String
  contractNumber       String          @unique
  terms                String
  rateCents            Int
  status               ContractStatus  @default(draft)
  shipperSignedAt      DateTime?
  driverSignedAt       DateTime?
  shipperSignature     String?
  driverSignature      String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relations
  load                 Load            @relation(fields: [loadId], references: [id], onDelete: Cascade)
  shipper              User            @relation("ShipperContracts", fields: [shipperId], references: [id])
  driver               User            @relation("DriverContracts", fields: [driverId], references: [id])

  @@map("contracts")
}

model Document {
  id                   String          @id @default(cuid())
  loadId               String
  type                 DocumentType
  title                String
  content              String?
  fileUrl              String?
  metadata             Json?
  createdBy            String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relations
  load                 Load            @relation(fields: [loadId], references: [id], onDelete: Cascade)
  createdByUser        User            @relation(fields: [createdBy], references: [id])

  @@map("documents")
}

model AuditLog {
  id                   String    @id @default(cuid())
  userId               String
  action               String
  tableName            String
  recordId             String
  oldValues            Json?
  newValues            Json?
  ipAddress            String?
  userAgent            String?
  createdAt            DateTime  @default(now())

  // Relations
  user                 User      @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
